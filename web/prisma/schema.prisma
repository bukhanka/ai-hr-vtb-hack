// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Перечисления
enum UserRole {
  HR
  APPLICANT
  ADMIN
}

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

// Модели
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  role        UserRole @default(APPLICANT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  createdJobs Job[]         @relation("JobCreator")
  interviews  Interview[]
  assessments Assessment[]
  resumes     Resume[]
  createdFrameworks AssessmentFramework[] @relation("FrameworkCreator")
  promptSimulations PromptSimulation[]

  @@map("users")
}

model Job {
  id          String    @id @default(cuid())
  title       String
  description String
  requirements String
  skills      String[]
  experience  String?
  salary      String?
  status      JobStatus @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // AI Document Processing Fields
  rawJobDocument     String?   // Исходный текст из загруженного документа
  fileName           String?   // Имя загруженного файла  
  filePath           String?   // Путь к файлу
  processingStatus   String    @default("MANUAL") // MANUAL, PENDING, PROCESSING, COMPLETED, FAILED
  parsedJobData      Json?     // Структурированные данные от AI
  aiSummary          String?   // Краткое описание от AI
  analyzedAt         DateTime? // Когда был проведен AI анализ

  // Assessment Framework
  assessmentFrameworkId String?
  assessmentFramework   AssessmentFramework? @relation(fields: [assessmentFrameworkId], references: [id])
  customWeights         Json?                // Кастомные веса для конкретной вакансии

  // Связи
  creatorId   String
  creator     User        @relation("JobCreator", fields: [creatorId], references: [id])
  interviews  Interview[]
  promptSimulations PromptSimulation[]

  @@map("jobs")
}

model Resume {
  id          String   @id @default(cuid())
  fileName    String
  filePath    String
  
  // Сырые данные
  rawContent  String?  // Исходный текст из файла
  content     String?  // Контент введенный вручную
  
  // Структурированные данные от AI
  parsedData  Json?    // Результат AI парсинга
  
  // Основные поля (совместимость)
  skills      String[]
  experience  Int?     // в годах
  education   String?
  
  // AI анализ
  aiSummary      String?   // Краткое резюме от AI
  matchScore     Float?    // Общий скор профиля
  processingStatus String @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  
  uploadedAt  DateTime @default(now())
  analyzedAt  DateTime? // Когда был проведен AI анализ

  // Связи
  applicantId String
  applicant   User   @relation(fields: [applicantId], references: [id])
  interviews  Interview[] // Интервью, где использовалось это резюме
  promptSimulations PromptSimulation[]

  @@map("resumes")
}

model Interview {
  id          String          @id @default(cuid())
  status      InterviewStatus @default(SCHEDULED)
  scheduledAt DateTime?
  startedAt   DateTime?
  endedAt     DateTime?
  transcript  String?
  aiNotes     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Resume matching
  resumeId           String?  // Какое резюме использовалось для отклика
  preInterviewScore  Float?   // Предварительный скор соответствия (0-100)
  matchingAnalysis   Json?    // Детальный анализ соответствия резюме и вакансии

  // Связи
  jobId       String
  job         Job          @relation(fields: [jobId], references: [id])
  applicantId String
  applicant   User         @relation(fields: [applicantId], references: [id])
  resume      Resume?      @relation(fields: [resumeId], references: [id])
  assessment  Assessment?

  @@map("interviews")
}

model Assessment {
  id              String   @id @default(cuid())
  
  // Связь с фреймворком оценки
  frameworkId     String?
  framework       AssessmentFramework? @relation(fields: [frameworkId], references: [id])
  
  // Динамические результаты по критериям
  scores          Json     @default("{}") // {"technical": 85, "communication": 78, ...}
  overallScore    Float    // Вычисленный общий балл
  
  // Результаты анализа
  analysisResults Json?    // Полные результаты от Gemini
  recommendation  String   // "HIRE", "REJECT", "REQUIRES_CLARIFICATION"
  
  // Обратная связь
  feedback        String?  // обратная связь для кандидата
  strengths       String[] // сильные стороны
  weaknesses      String[] // слабые места
  redFlags        String[] // красные флаги
  notes           String?
  
  // Мета-информация
  analysisStatus  String   @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED
  confidence      Float?   // Уверенность AI в оценке (0-100)
  processingTime  Int?     // Время анализа в секундах
  
  // Совместимость с текущей системой
  technicalScore     Float?
  softSkillsScore    Float?
  communicationScore Float?
  
  createdAt       DateTime @default(now())

  // Связи
  interviewId String    @unique
  interview   Interview @relation(fields: [interviewId], references: [id])
  assessorId  String    // кто проводил оценку (AI или HR)
  assessor    User      @relation(fields: [assessorId], references: [id])

  @@map("assessments")
}

model AssessmentFramework {
  id          String   @id @default(cuid())
  name        String   // "Tech Interview", "Sales Interview", "Leadership"
  version     String   // "1.0", "2.1" для версионирования
  description String?
  isActive    Boolean  @default(true)
  
  // Конфигурация критериев и весов
  criteria    Json     // Динамическая структура критериев
  weights     Json     // Веса для каждого критерия
  scoringMethod String @default("WEIGHTED_AVERAGE") // "WEIGHTED_AVERAGE", "MATRIX", "THRESHOLD"
  
  // Настройки анализа для Gemini
  analysisConfig Json  // Конфиг для анализа (FPS, промпты и т.д.)
  
  // Настройки красных флагов
  redFlagsConfig Json? // Конфигурация для выявления красных флагов
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Связи
  creatorId   String
  creator     User     @relation("FrameworkCreator", fields: [creatorId], references: [id])
  jobs        Job[]    // Какие вакансии используют этот фреймворк
  assessments Assessment[] // Все оценки по этому фреймворку

  @@map("assessment_frameworks")
}

model PromptSimulation {
  id          String   @id @default(cuid())
  name        String   // "Test HR Prompt v2.1"
  
  // Настройки симуляции
  hrPrompt    String   // Тестируемый промпт для HR
  
  // Исходные данные  
  jobId       String
  job         Job      @relation(fields: [jobId], references: [id])
  resumeId    String  
  resume      Resume   @relation(fields: [resumeId], references: [id])
  
  // Результаты симуляции
  dialogue    Json?    // Сгенерированный диалог
  analysis    Json?    // Анализ и рекомендации
  score       Float?   // Общая оценка промпта (0-100)
  
  // Статус
  status      String   @default("PENDING") // PENDING, COMPLETED, FAILED
  
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  // Создатель
  creatorId   String
  creator     User     @relation(fields: [creatorId], references: [id])

  @@map("prompt_simulations")
}
