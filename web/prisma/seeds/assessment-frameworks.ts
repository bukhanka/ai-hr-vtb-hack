import { PrismaClient } from '../../src/generated/prisma';

const prisma = new PrismaClient();

export const techInterviewFramework = {
  name: "Tech Interview",
  version: "1.0",
  description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –æ—Ü–µ–Ω–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
  isActive: true,
  criteria: {
    technical: {
      weight: 50,
      description: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –∑–Ω–∞–Ω–∏—è",
      subcriteria: {
        coding_skills: {
          weight: 40,
          description: "–ù–∞–≤—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã"
        },
        system_design: {
          weight: 30,
          description: "–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞"
        },
        problem_solving: {
          weight: 30,
          description: "–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á"
        }
      }
    },
    communication: {
      weight: 25,
      description: "–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏",
      subcriteria: {
        clarity: {
          weight: 50,
          description: "–Ø—Å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è –º—ã—Å–ª–µ–π"
        },
        technical_explanation: {
          weight: 50,
          description: "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ–±—ä—è—Å–Ω—è—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏"
        }
      }
    },
    experience: {
      weight: 15,
      description: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç",
      subcriteria: {
        relevant_projects: {
          weight: 60,
          description: "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
        },
        years_experience: {
          weight: 40,
          description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –æ–ø—ã—Ç–∞"
        }
      }
    },
    soft_skills: {
      weight: 10,
      description: "–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
      subcriteria: {
        teamwork: {
          weight: 50,
          description: "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ"
        },
        learning_ability: {
          weight: 50,
          description: "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é"
        }
      }
    }
  },
  weights: {
    technical: 50,
    communication: 25,
    experience: 15,
    soft_skills: 10
  },
  scoringMethod: "WEIGHTED_AVERAGE",
  analysisConfig: {
    video_fps: 2,
    analyze_emotions: true,
    detect_pauses: true,
    analyze_confidence: true,
    min_confidence_threshold: 70,
    custom_prompts: {
      main_analysis: `Analyze this technical interview video with focus on:
1. Technical competency demonstration
2. Problem-solving approach
3. Communication clarity
4. Confidence and body language
5. Response quality and depth`,
      red_flags_detection: `Look for these red flags:
- Inconsistent statements about experience
- Inability to explain claimed technologies
- Excessive nervousness or evasiveness
- Copy-paste answers without understanding
- Contradictions with resume claims`
    }
  },
  redFlagsConfig: {
    detect_inconsistencies: true,
    detect_evasiveness: true,
    detect_template_answers: true,
    confidence_threshold: 30,
    pause_threshold_seconds: 10
  }
};

export const salesInterviewFramework = {
  name: "Sales Interview",
  version: "1.0", 
  description: "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –æ—Ü–µ–Ω–∫–∏ sales —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
  isActive: true,
  criteria: {
    sales_skills: {
      weight: 40,
      description: "–ù–∞–≤—ã–∫–∏ –ø—Ä–æ–¥–∞–∂",
      subcriteria: {
        persuasion: { weight: 30, description: "–£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" },
        objection_handling: { weight: 30, description: "–†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏" },
        closing: { weight: 40, description: "–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–æ–∫" }
      }
    },
    communication: {
      weight: 35,
      description: "–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏",
      subcriteria: {
        presentation: { weight: 50, description: "–ù–∞–≤—ã–∫–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏" },
        listening: { weight: 50, description: "–ê–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ" }
      }
    },
    personality: {
      weight: 20,
      description: "–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞",
      subcriteria: {
        charisma: { weight: 60, description: "–•–∞—Ä–∏–∑–º–∞ –∏ –æ–±–∞—è–Ω–∏–µ" },
        resilience: { weight: 40, description: "–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å" }
      }
    },
    experience: {
      weight: 5,
      description: "–û–ø—ã—Ç –ø—Ä–æ–¥–∞–∂"
    }
  },
  weights: {
    sales_skills: 40,
    communication: 35,
    personality: 20,
    experience: 5
  },
  scoringMethod: "WEIGHTED_AVERAGE",
  analysisConfig: {
    video_fps: 1,
    analyze_emotions: true,
    detect_pauses: false,
    analyze_confidence: true,
    custom_prompts: {
      main_analysis: `Analyze this sales interview focusing on:
1. Sales techniques and approach
2. Communication and presentation skills  
3. Charisma and interpersonal connection
4. Handling of difficult questions
5. Overall sales potential`
    }
  },
  redFlagsConfig: {
    detect_inconsistencies: true,
    detect_evasiveness: false,
    confidence_threshold: 40
  }
};

export async function seedAssessmentFrameworks(adminUserId: string) {
  console.log('üå± Seeding Assessment Frameworks...');

  const frameworks = [
    { ...techInterviewFramework, creatorId: adminUserId },
    { ...salesInterviewFramework, creatorId: adminUserId }
  ];

  for (const framework of frameworks) {
    const existing = await prisma.assessmentFramework.findFirst({
      where: { name: framework.name, version: framework.version }
    });

    if (!existing) {
      await prisma.assessmentFramework.create({
        data: framework
      });
      console.log(`‚úÖ Created framework: ${framework.name} v${framework.version}`);
    } else {
      console.log(`‚ö†Ô∏è  Framework already exists: ${framework.name} v${framework.version}`);
    }
  }

  console.log('‚úÖ Assessment Frameworks seeded successfully!');
}