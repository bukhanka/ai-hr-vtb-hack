import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';
import { getTokenFromRequest, verifyToken, isHR } from '../../../../lib/auth';
import { JobDocumentParser } from '../../../../lib/job-document-parser';

// POST /api/jobs/upload - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = getTokenFromRequest(request);
    if (!token) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    const payload = await verifyToken(token);
    if (!payload) {
      return NextResponse.json(
        { error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      );
    }

    // –¢–æ–ª—å–∫–æ HR –º–æ–≥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–∞–∫–∞–Ω—Å–∏–π
    if (!isHR(payload.role)) {
      return NextResponse.json(
        { error: '–ó–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–∞–∫–∞–Ω—Å–∏–π –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã' },
        { status: 403 }
      );
    }

    const formData = await request.formData();
    const file = formData.get('file') as File | null;
    const content = formData.get('content') as string || '';

    // –î–ª—è –º–æ–∫-–≤–µ—Ä—Å–∏–∏ –º—ã –Ω–µ –±—É–¥–µ–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫
    // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≤ S3 –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    if (!file && !content.trim()) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏' },
        { status: 400 }
      );
    }

    let fileName = '–í–∞–∫–∞–Ω—Å–∏—è (–≤–≤–µ–¥–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é)';
    let filePath = '';
    
    if (file) {
      fileName = file.name;
      // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      filePath = `/uploads/jobs/${Date.now()}_${file.name}`;
      
      console.log(`üìÑ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Ñ–∞–π–ª –≤–∞–∫–∞–Ω—Å–∏–∏: ${fileName} (${file.size} –±–∞–π—Ç)`);
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const job = await prisma.job.create({
      data: {
        title: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...',
        description: '–î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ò–ò...',
        requirements: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è...',
        skills: [],
        fileName: fileName,
        filePath: filePath,
        rawJobDocument: content.trim() || null,
        processingStatus: file ? 'PENDING' : 'COMPLETED',
        status: 'DRAFT', // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
        creatorId: payload.userId,
      },
      select: {
        id: true,
        title: true,
        fileName: true,
        processingStatus: true,
        status: true,
        createdAt: true,
      }
    });

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π AI –∞–Ω–∞–ª–∏–∑
    let aiAnalysisPromise = null;
    if (file) {
      console.log(`ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π AI –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${job.id}`);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Ç–≤–µ—Ç
      aiAnalysisPromise = performBackgroundJobAIAnalysis(job.id, file, payload.userId)
        .catch(error => {
          console.error(`‚ùå –§–æ–Ω–æ–≤—ã–π AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${job.id}:`, error);
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ FAILED
          prisma.job.update({
            where: { id: job.id },
            data: { 
              processingStatus: 'FAILED',
              title: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
              description: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –≤—Ä—É—á–Ω—É—é.',
              requirements: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã'
            }
          }).catch(updateError => {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏:', updateError);
          });
        });
    }

    return NextResponse.json({
      success: true,
      job: {
        id: job.id,
        title: job.title,
        fileName: job.fileName,
        processingStatus: job.processingStatus,
        status: job.status,
        createdAt: job.createdAt,
      },
      message: file 
        ? '–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ AI –∞–Ω–∞–ª–∏–∑. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.'
        : '–í–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ.',
    });

  } catch (error: any) {
    console.error('Job upload error:', error);
    return NextResponse.json(
      { error: error?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏' },
      { status: 500 }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
async function performBackgroundJobAIAnalysis(jobId: string, file: File, userId: string): Promise<void> {
  try {
    console.log(`üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π AI –∞–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
    await prisma.job.update({
      where: { id: jobId },
      data: { processingStatus: 'PROCESSING' }
    });

    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    const parser = new JobDocumentParser();
    const parsedData = await parser.parseJobDocument(file);

    console.log(`‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}`);
    console.log('üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
      title: parsedData.title,
      skillsCount: parser.extractAllSkills ? JobDocumentParser.prototype.constructor.prototype.extractAllSkills?.call(null, parsedData)?.length || 0 : 0,
      responsibilitiesCount: parsedData.responsibilities.length,
      salary: parsedData.salary
    });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ö–µ–º–æ–π
    const allSkills = [
      ...parsedData.skills.required,
      ...parsedData.skills.preferred,
      ...parsedData.skills.technical,
      ...parsedData.skills.soft
    ];
    
    const uniqueSkills = Array.from(new Set(allSkills)).filter(skill => skill.trim().length > 0);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–ø—ã—Ç–∞
    let experienceStr = '';
    if (parsedData.experience.minYears && parsedData.experience.maxYears) {
      experienceStr = `${parsedData.experience.minYears}-${parsedData.experience.maxYears} –ª–µ—Ç`;
    } else if (parsedData.experience.minYears) {
      experienceStr = `–æ—Ç ${parsedData.experience.minYears} –ª–µ—Ç`;
    } else if (parsedData.experience.level !== 'Any') {
      experienceStr = parsedData.experience.level;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞—Ä–ø–ª–∞—Ç—ã
    let salaryStr = '';
    if (parsedData.salary.min && parsedData.salary.max) {
      salaryStr = `${parsedData.salary.min.toLocaleString('ru-RU')} - ${parsedData.salary.max.toLocaleString('ru-RU')} ${parsedData.salary.currency}`;
    } else if (parsedData.salary.min) {
      salaryStr = `–æ—Ç ${parsedData.salary.min.toLocaleString('ru-RU')} ${parsedData.salary.currency}`;
    } else if (parsedData.salary.max) {
      salaryStr = `–¥–æ ${parsedData.salary.max.toLocaleString('ru-RU')} ${parsedData.salary.currency}`;
    }
    
    if (parsedData.salary.additional) {
      salaryStr += salaryStr ? ` (${parsedData.salary.additional})` : parsedData.salary.additional;
    }

    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ AI —Ä–µ–∑—é–º–µ
    const aiSummary = `AI –∞–Ω–∞–ª–∏–∑: –ü–æ–∑–∏—Ü–∏—è ${parsedData.experience.level} —É—Ä–æ–≤–Ω—è, —Ç—Ä–µ–±—É–µ—Ç ${uniqueSkills.slice(0, 5).join(', ')}${uniqueSkills.length > 5 ? ' –∏ –¥—Ä.' : ''}. ${parsedData.workFormat !== 'Any' ? `–§–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç—ã: ${parsedData.workFormat}.` : ''} ${parsedData.location ? `–õ–æ–∫–∞—Ü–∏—è: ${parsedData.location}.` : ''}`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    await prisma.job.update({
      where: { id: jobId },
      data: {
        title: parsedData.title,
        description: parsedData.description,
        requirements: parsedData.requirements,
        skills: uniqueSkills,
        experience: experienceStr || null,
        salary: salaryStr || null,
        parsedJobData: parsedData as any, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON
        aiSummary: aiSummary,
        processingStatus: 'COMPLETED',
        analyzedAt: new Date(),
      }
    });

    console.log(`üéâ –í–∞–∫–∞–Ω—Å–∏—è ${jobId} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId}:`, error);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–µ—É–¥–∞—á–Ω—ã–π
    await prisma.job.update({
      where: { id: jobId },
      data: { 
        processingStatus: 'FAILED',
        title: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        description: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –≤—Ä—É—á–Ω—É—é.`,
        requirements: '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        aiSummary: `–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
      }
    }).catch(updateError => {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ FAILED:', updateError);
    });
    
    throw error;
  }
}