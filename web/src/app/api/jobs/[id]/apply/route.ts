import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../../lib/prisma';
import { getTokenFromRequest, verifyToken, isApplicant } from '../../../../../lib/auth';
import { JobStatus, InterviewStatus } from '../../../../../generated/prisma';
import { ResumeJobMatcher, type ParsedResumeData, type JobData, type JobMatchResult } from '../../../../../lib/resume-job-matcher';

// POST /api/jobs/[id]/apply - –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = getTokenFromRequest(request);
    if (!token) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    const payload = await verifyToken(token);
    if (!payload) {
      return NextResponse.json(
        { error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      );
    }

    // –¢–æ–ª—å–∫–æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    if (!isApplicant(payload.role)) {
      return NextResponse.json(
        { error: '–û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏' },
        { status: 403 }
      );
    }

    const { id } = await params;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json().catch(() => ({}));
    const { resumeId, coverLetter } = body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!resumeId) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏
    const job = await prisma.job.findUnique({
      where: { id },
    });

    if (!job) {
      return NextResponse.json(
        { error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }

    if (job.status !== JobStatus.ACTIVE) {
      return NextResponse.json(
        { error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ä–µ–∑—é–º–µ
    const resume = await prisma.resume.findUnique({
      where: { id: resumeId },
      include: { applicant: true }
    });

    if (!resume) {
      return NextResponse.json(
        { error: '–†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' },
        { status: 404 }
      );
    }

    if (resume.applicantId !== payload.userId) {
      return NextResponse.json(
        { error: '–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ä–µ–∑—é–º–µ' },
        { status: 403 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–≤–∞–ª –ª–∏ —É–∂–µ –∑–∞—è–≤–∫—É —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const existingInterview = await prisma.interview.findFirst({
      where: {
        jobId: id,
        applicantId: payload.userId,
      },
    });

    if (existingInterview) {
      return NextResponse.json(
        { error: '–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é' },
        { status: 400 }
      );
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑—é–º–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑—é–º–µ ${resumeId} –≤–∞–∫–∞–Ω—Å–∏–∏ ${id}`);
    
    let preInterviewScore = null;
    let matchingAnalysis = null;
    
    try {
      let matcher: ResumeJobMatcher | null = null;
      
      // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å matcher —Å Gemini API
      try {
        matcher = new ResumeJobMatcher();
        console.log('‚úÖ ResumeJobMatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Gemini API');
      } catch (error) {
        console.warn('‚ö†Ô∏è Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –∞–Ω–∞–ª–∏–∑:', error);
      }
      
      if (resume.parsedData) {
        // –ü–æ–ª–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑
        const jobData: JobData = {
          id: job.id,
          title: job.title,
          description: job.description,
          requirements: job.requirements,
          skills: job.skills,
          experience: job.experience || undefined,
          salary: job.salary || undefined
        };
        
        const matchResult = matcher 
          ? await matcher.analyzeMatch(resume.parsedData as ParsedResumeData, jobData)
          : calculateBasicMatch(resume.parsedData as ParsedResumeData, jobData);
        preInterviewScore = matchResult.overallScore;
        matchingAnalysis = {
          skillsMatch: matchResult.skillsMatch,
          experienceMatch: matchResult.experienceMatch,
          educationMatch: matchResult.educationMatch,
          confidence: matchResult.confidence,
          matchedSkills: matchResult.detailedAnalysis.matchedSkills,
          missingSkills: matchResult.detailedAnalysis.missingSkills,
          strengths: matchResult.detailedAnalysis.strengths,
          weaknesses: matchResult.detailedAnalysis.weaknesses,
          recommendation: matchResult.recommendation,
          reasoningNotes: matchResult.reasoningNotes
        };
        
        console.log(`‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∫–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${preInterviewScore}%`);
      } else {
        // –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö –ø–æ–ª–µ–π
        console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è`);
        
        const basicResumeData: ParsedResumeData = {
          personalInfo: { name: `${resume.applicant.firstName} ${resume.applicant.lastName}` },
          summary: resume.aiSummary || undefined,
          skills: {
            technical: resume.skills || [],
            soft: [],
            tools: [],
            frameworks: [],
            databases: []
          },
          workExperience: [],
          education: resume.education ? [{ degree: resume.education, institution: '' }] : [],
          totalExperienceYears: resume.experience || 0,
          projects: [],
          certifications: []
        };
        
        const jobData: JobData = {
          id: job.id,
          title: job.title,
          description: job.description,
          requirements: job.requirements,
          skills: job.skills,
          experience: job.experience || undefined,
          salary: job.salary || undefined
        };
        
        const matchResult = matcher 
          ? await matcher.quickMatch(basicResumeData, jobData)
          : calculateBasicMatch(basicResumeData, jobData);
        preInterviewScore = matchResult.overallScore;
        matchingAnalysis = {
          skillsMatch: matchResult.skillsMatch,
          experienceMatch: matchResult.experienceMatch,
          educationMatch: matchResult.educationMatch,
          confidence: matchResult.confidence,
          matchedSkills: matchResult.detailedAnalysis.matchedSkills,
          missingSkills: matchResult.detailedAnalysis.missingSkills,
          strengths: matchResult.detailedAnalysis.strengths,
          weaknesses: matchResult.detailedAnalysis.weaknesses,
          recommendation: matchResult.recommendation,
          reasoningNotes: matchResult.reasoningNotes
        };
        
        console.log(`‚úÖ –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–∫–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${preInterviewScore}%`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      preInterviewScore = 50; // –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      matchingAnalysis = {
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
        message: '–ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–∑–∂–µ'
      };
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º SCHEDULED
    const interview = await prisma.interview.create({
      data: {
        jobId: id,
        applicantId: payload.userId,
        resumeId: resumeId,
        preInterviewScore: preInterviewScore,
        matchingAnalysis: matchingAnalysis,
        status: InterviewStatus.SCHEDULED,
        scheduledAt: new Date(), // –î–ª—è AI-–∏–Ω—Ç–µ—Ä–≤—å—é –º–æ–∂–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É
        aiNotes: coverLetter || null, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö
      },
      include: {
        job: {
          select: {
            title: true,
            description: true,
          }
        },
        applicant: {
          select: {
            firstName: true,
            lastName: true,
            email: true,
          }
        },
        resume: {
          select: {
            fileName: true,
            aiSummary: true
          }
        }
      },
    });

    console.log(`‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é —Å–æ–∑–¥–∞–Ω–æ —Å ID: ${interview.id}. –°–∫–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è: ${preInterviewScore}%`);

    return NextResponse.json({
      message: '–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–∞–º –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–æ AI-—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ.',
      interview: {
        id: interview.id,
        status: interview.status,
        scheduledAt: interview.scheduledAt,
        preInterviewScore: interview.preInterviewScore,
        matchingAnalysis: interview.matchingAnalysis,
        job: interview.job,
        resume: interview.resume
      },
    }, { status: 201 });
  } catch (error) {
    console.error('Job application error:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é' },
      { status: 500 }
    );
  }
}

// Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±–µ–∑ AI
function calculateBasicMatch(resume: ParsedResumeData, job: JobData): JobMatchResult {
  const allResumeSkills = [
    ...resume.skills.technical,
    ...resume.skills.tools,
    ...resume.skills.frameworks,
    ...resume.skills.databases
  ].map(skill => skill.toLowerCase().trim());
  
  const jobSkills = job.skills.map(skill => skill.toLowerCase().trim());
  
  // –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
  const matchedSkills = jobSkills.filter(jobSkill => 
    allResumeSkills.some(resumeSkill => 
      resumeSkill.includes(jobSkill) || jobSkill.includes(resumeSkill)
    )
  );
  
  const missingSkills = jobSkills.filter(jobSkill => 
    !allResumeSkills.some(resumeSkill => 
      resumeSkill.includes(jobSkill) || jobSkill.includes(resumeSkill)
    )
  );
  
  // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞
  const skillsMatch = jobSkills.length > 0 ? (matchedSkills.length / jobSkills.length) * 100 : 50;
  const experienceMatch = resume.totalExperienceYears ? Math.min(resume.totalExperienceYears * 20, 100) : 50;
  const educationMatch = resume.education.length > 0 ? 80 : 60;
  
  const overallScore = Math.round(
    (skillsMatch * 0.5) + (experienceMatch * 0.3) + (educationMatch * 0.2)
  );
  
  let recommendation: JobMatchResult['recommendation'];
  if (overallScore >= 85) recommendation = 'STRONG_MATCH';
  else if (overallScore >= 70) recommendation = 'GOOD_MATCH';
  else if (overallScore >= 50) recommendation = 'WEAK_MATCH';
  else recommendation = 'NO_MATCH';
  
  return {
    overallScore,
    skillsMatch,
    experienceMatch,
    educationMatch,
    confidence: 60, // –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    detailedAnalysis: {
      matchedSkills,
      missingSkills,
      strengths: matchedSkills.length > 0 ? [`–í–ª–∞–¥–µ–µ—Ç ${matchedSkills.length} –∏–∑ ${jobSkills.length} —Ç—Ä–µ–±—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤`] : [],
      weaknesses: missingSkills.length > 0 ? [`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞–≤—ã–∫–∏: ${missingSkills.join(', ')}`] : [],
      redFlags: [],
      recommendations: missingSkills.length > 0 ? [`–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑—É—á–∏—Ç—å: ${missingSkills.slice(0, 3).join(', ')}`] : []
    },
    recommendation,
    reasoningNotes: `–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑: ${matchedSkills.length}/${jobSkills.length} –Ω–∞–≤—ã–∫–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (Gemini API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)`
  };
}