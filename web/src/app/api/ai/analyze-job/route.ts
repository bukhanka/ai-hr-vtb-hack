import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '../../../../lib/prisma';
import { getTokenFromRequest, verifyToken, isHR } from '../../../../lib/auth';
import { JobDocumentParser, JobDataUtils } from '../../../../lib/job-document-parser';

// POST /api/ai/analyze-job - –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ —á–µ—Ä–µ–∑ AI
export async function POST(request: NextRequest) {
  try {
    console.log('üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ AI –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = getTokenFromRequest(request);
    if (!token) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    const payload = await verifyToken(token);
    if (!payload) {
      return NextResponse.json(
        { error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      );
    }

    // –¢–æ–ª—å–∫–æ HR –º–æ–≥—É—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤–∞–∫–∞–Ω—Å–∏–π
    if (!isHR(payload.role)) {
      return NextResponse.json(
        { error: '–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º' },
        { status: 403 }
      );
    }

    const formData = await request.formData();
    const file = formData.get('file') as File | null;
    const content = formData.get('content') as string || '';
    const jobId = formData.get('jobId') as string || '';

    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', {
      hasFile: !!file,
      hasContent: !!content.trim(),
      jobId: jobId || '–Ω–µ —É–∫–∞–∑–∞–Ω',
      fileInfo: file ? `${file.name} (${file.type}, ${file.size} –±–∞–π—Ç)` : '–Ω–µ—Ç —Ñ–∞–π–ª–∞'
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if (!file && !content.trim()) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏' },
        { status: 400 }
      );
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω jobId, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
    if (jobId) {
      const existingJob = await prisma.job.findUnique({
        where: { id: jobId },
        select: { id: true, creatorId: true }
      });

      if (!existingJob) {
        return NextResponse.json(
          { error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
          { status: 404 }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é
      if (existingJob.creatorId !== payload.userId) {
        return NextResponse.json(
          { error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏' },
          { status: 403 }
        );
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å jobId, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"
    if (jobId) {
      await prisma.job.update({
        where: { id: jobId },
        data: { processingStatus: 'PROCESSING' }
      });
    }

    try {
      console.log(`ü§ñ –ù–∞—á–∏–Ω–∞–µ–º AI –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ ${jobId || '(–Ω–æ–≤–æ–π)'}`);
      
      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
      const parser = new JobDocumentParser();
      let parsedData;
      let rawContent = '';

      if (file) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if (!parser.isFormatSupported(file.type)) {
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: ${file.type}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: ${parser.getSupportedFormats().join(', ')}`);
        }

        console.log(`üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${file.name} (${file.type})`);
        parsedData = await parser.parseJobDocument(file);
        rawContent = `–§–∞–π–ª: ${file.name} (${file.type})`;
      } else if (content) {
        console.log('üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ');
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
        const textFile = new File([content], 'job_description.txt', { type: 'text/plain' });
        parsedData = await parser.parseJobDocument(textFile);
        rawContent = content;
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞
      const validation = JobDataUtils.validateJobData(parsedData!);
      if (!validation.isValid) {
        console.warn('‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏:', validation.missingFields);
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ö–µ–º–æ–π
      const allSkills = JobDataUtils.extractAllSkills(parsedData!);
      const salaryRange = JobDataUtils.formatSalaryRange(parsedData!);
      const experienceRange = JobDataUtils.getExperienceRange(parsedData!);

      // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ AI —Ä–µ–∑—é–º–µ
      const aiSummary = `AI –∞–Ω–∞–ª–∏–∑: –ü–æ–∑–∏—Ü–∏—è ${parsedData!.experience.level} —É—Ä–æ–≤–Ω—è. –ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏: ${allSkills.slice(0, 5).join(', ')}${allSkills.length > 5 ? ' –∏ –¥—Ä.' : ''}. ${parsedData!.workFormat !== 'Any' ? `–§–æ—Ä–º–∞—Ç: ${parsedData!.workFormat}.` : ''} ${parsedData!.location ? `–õ–æ–∫–∞—Ü–∏—è: ${parsedData!.location}.` : ''}`;

      console.log('üìä AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
        title: parsedData!.title,
        skillsCount: allSkills.length,
        responsibilitiesCount: parsedData!.responsibilities.length,
        hasRequirements: !!parsedData!.requirements,
        hasSalary: !!(parsedData!.salary.min || parsedData!.salary.max)
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å jobId, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é
      if (jobId) {
        const updatedJob = await prisma.job.update({
          where: { id: jobId },
          data: {
            title: parsedData!.title,
            description: parsedData!.description,
            requirements: parsedData!.requirements,
            skills: allSkills,
            experience: experienceRange,
            salary: salaryRange,
            rawJobDocument: rawContent,
            parsedJobData: parsedData as any,
            aiSummary: aiSummary,
            processingStatus: 'COMPLETED',
            analyzedAt: new Date(),
          },
          select: {
            id: true,
            title: true,
            description: true,
            requirements: true,
            skills: true,
            experience: true,
            salary: true,
            processingStatus: true,
            aiSummary: true,
            analyzedAt: true,
          }
        });

        return NextResponse.json({
          success: true,
          job: updatedJob,
          parsedData: parsedData,
          aiSummary: aiSummary,
          extractedSkills: allSkills,
          validation: validation,
          message: '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≤–∞–∫–∞–Ω—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
        });
      } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        return NextResponse.json({
          success: true,
          parsedData: parsedData,
          extractedData: {
            title: parsedData!.title,
            description: parsedData!.description,
            requirements: parsedData!.requirements,
            skills: allSkills,
            experience: experienceRange,
            salary: salaryRange,
          },
          aiSummary: aiSummary,
          validation: validation,
          message: '–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
        });
      }

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å jobId, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
      if (jobId) {
        await prisma.job.update({
          where: { id: jobId },
          data: { 
            processingStatus: 'FAILED',
            aiSummary: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
          }
        }).catch(updateError => {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏:', updateError);
        });
      }

      return NextResponse.json(
        { 
          error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
          details: error.stack ? error.stack.split('\n').slice(0, 3) : undefined
        },
        { status: 500 }
      );
    }

  } catch (error: any) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ analyze-job:', error);
    return NextResponse.json(
      { error: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞' },
      { status: 500 }
    );
  }
}

// GET /api/ai/analyze-job - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = getTokenFromRequest(request);
    if (!token) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      );
    }

    const payload = await verifyToken(token);
    if (!payload) {
      return NextResponse.json(
        { error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      );
    }

    // –¢–æ–ª—å–∫–æ HR –º–æ–≥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–µ –≤–∞–∫–∞–Ω—Å–∏–π
    if (!isHR(payload.role)) {
      return NextResponse.json(
        { error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' },
        { status: 403 }
      );
    }

    const { searchParams } = new URL(request.url);
    const jobId = searchParams.get('jobId');

    if (!jobId) {
      return NextResponse.json(
        { error: '–ù–µ —É–∫–∞–∑–∞–Ω ID –≤–∞–∫–∞–Ω—Å–∏–∏' },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏
    const job = await prisma.job.findUnique({
      where: { id: jobId },
      select: {
        id: true,
        title: true,
        processingStatus: true,
        aiSummary: true,
        analyzedAt: true,
        parsedJobData: true,
        fileName: true,
        creatorId: true,
      }
    });

    if (!job) {
      return NextResponse.json(
        { error: '–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' },
        { status: 404 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (job.creatorId !== payload.userId) {
      return NextResponse.json(
        { error: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏' },
        { status: 403 }
      );
    }

    return NextResponse.json({
      jobId: job.id,
      title: job.title,
      processingStatus: job.processingStatus,
      aiSummary: job.aiSummary,
      analyzedAt: job.analyzedAt,
      fileName: job.fileName,
      hasFullParsedData: !!job.parsedJobData,
      message: getStatusMessage(job.processingStatus)
    });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –∞–Ω–∞–ª–∏–∑–∞' },
      { status: 500 }
    );
  }
}

function getStatusMessage(status: string): string {
  switch (status) {
    case 'PENDING':
      return '–î–æ–∫—É–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É';
    case 'PROCESSING':
      return '–î–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è AI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...';
    case 'COMPLETED':
      return '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ';
    case 'FAILED':
      return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞';
    case 'MANUAL':
      return '–í–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
  }
}