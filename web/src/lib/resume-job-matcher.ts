import { GoogleGenerativeAI } from '@google/generative-ai';

// –¢–∏–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
export interface JobMatchResult {
  overallScore: number; // 0-100
  skillsMatch: number;
  experienceMatch: number;
  educationMatch: number;
  confidence: number; // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI –≤ –æ—Ü–µ–Ω–∫–µ
  
  detailedAnalysis: {
    matchedSkills: string[];
    missingSkills: string[];
    experienceGap?: string;
    strengths: string[];
    weaknesses: string[];
    redFlags: string[];
    recommendations: string[];
  };
  
  recommendation: 'STRONG_MATCH' | 'GOOD_MATCH' | 'WEAK_MATCH' | 'NO_MATCH';
  reasoningNotes: string;
}

export interface ParsedResumeData {
  personalInfo: {
    name?: string;
    email?: string;
    phone?: string;
  };
  summary?: string;
  skills: {
    technical: string[];
    soft: string[];
    tools: string[];
    frameworks: string[];
    databases: string[];
  };
  workExperience: Array<{
    position: string;
    company: string;
    duration: string;
    description: string;
  }>;
  education: Array<{
    degree: string;
    institution: string;
    year?: string;
  }>;
  totalExperienceYears?: number;
  projects: Array<{
    name: string;
    description: string;
    technologies: string[];
  }>;
  certifications: Array<{
    name: string;
    issuer: string;
    year?: string;
  }>;
}

export interface JobData {
  id: string;
  title: string;
  description: string;
  requirements: string;
  skills: string[];
  experience?: string;
  salary?: string;
}

export class ResumeJobMatcher {
  private genAI: GoogleGenerativeAI;
  
  constructor() {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    this.genAI = new GoogleGenerativeAI(apiKey);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—é–º–µ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  async analyzeMatch(resume: ParsedResumeData, job: JobData): Promise<JobMatchResult> {
    try {
      console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–∏: ${job.title}`);
      
      const prompt = this.generateMatchingPrompt(resume, job);
      const model = this.genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
      
      const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç AI
      const analysis = this.parseAIResponse(text);
      
      console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—â–∏–π —Å–∫–æ—Ä: ${analysis.overallScore}%`);
      return analysis;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return this.getFallbackResult(resume, job);
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI (–±–∞–∑–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
   */
  async quickMatch(resume: ParsedResumeData, job: JobData): Promise<JobMatchResult> {
    console.log(`‚ö° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –±–µ–∑ AI`);
    
    const allResumeSkills = [
      ...resume.skills.technical,
      ...resume.skills.tools,
      ...resume.skills.frameworks,
      ...resume.skills.databases
    ].map(skill => skill.toLowerCase().trim());
    
    const jobSkills = job.skills.map(skill => skill.toLowerCase().trim());
    
    // –ü–æ–¥—Å—á–µ—Ç —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –Ω–∞–≤—ã–∫–æ–≤
    const matchedSkills = jobSkills.filter(jobSkill => 
      allResumeSkills.some(resumeSkill => 
        resumeSkill.includes(jobSkill) || jobSkill.includes(resumeSkill)
      )
    );
    
    const missingSkills = jobSkills.filter(jobSkill => 
      !allResumeSkills.some(resumeSkill => 
        resumeSkill.includes(jobSkill) || jobSkill.includes(resumeSkill)
      )
    );
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞
    const skillsMatch = jobSkills.length > 0 ? (matchedSkills.length / jobSkills.length) * 100 : 50;
    const experienceMatch = this.calculateExperienceMatch(resume, job);
    const educationMatch = resume.education.length > 0 ? 80 : 60;
    
    const overallScore = Math.round(
      (skillsMatch * 0.5) + (experienceMatch * 0.3) + (educationMatch * 0.2)
    );
    
    let recommendation: JobMatchResult['recommendation'];
    if (overallScore >= 85) recommendation = 'STRONG_MATCH';
    else if (overallScore >= 70) recommendation = 'GOOD_MATCH';
    else if (overallScore >= 50) recommendation = 'WEAK_MATCH';
    else recommendation = 'NO_MATCH';
    
    return {
      overallScore,
      skillsMatch,
      experienceMatch,
      educationMatch,
      confidence: 70, // –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
      detailedAnalysis: {
        matchedSkills,
        missingSkills,
        strengths: matchedSkills.length > 0 ? [`–í–ª–∞–¥–µ–µ—Ç ${matchedSkills.length} –∏–∑ ${jobSkills.length} —Ç—Ä–µ–±—É–µ–º—ã—Ö –Ω–∞–≤—ã–∫–æ–≤`] : [],
        weaknesses: missingSkills.length > 0 ? [`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞–≤—ã–∫–∏: ${missingSkills.join(', ')}`] : [],
        redFlags: [],
        recommendations: missingSkills.length > 0 ? [`–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑—É—á–∏—Ç—å: ${missingSkills.slice(0, 3).join(', ')}`] : []
      },
      recommendation,
      reasoningNotes: `–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑: ${matchedSkills.length}/${jobSkills.length} –Ω–∞–≤—ã–∫–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç`
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
   */
  private generateMatchingPrompt(resume: ParsedResumeData, job: JobData): string {
    return `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∞. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–¢–†–û–ì–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.

–í–ê–ö–ê–ù–°–ò–Ø:
–ù–∞–∑–≤–∞–Ω–∏–µ: ${job.title}
–û–ø–∏—Å–∞–Ω–∏–µ: ${job.description}
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${job.requirements}
–ù–∞–≤—ã–∫–∏: ${job.skills.join(', ')}
–û–ø—ã—Ç: ${job.experience || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–†–ï–ó–Æ–ú–ï –ö–ê–ù–î–ò–î–ê–¢–ê:
–ò–º—è: ${resume.personalInfo.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${resume.summary || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏: ${resume.skills.technical.join(', ')}
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: ${resume.skills.tools.join(', ')}
–§—Ä–µ–π–º–≤–æ—Ä–∫–∏: ${resume.skills.frameworks.join(', ')}
–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${resume.skills.databases.join(', ')}
–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ${resume.totalExperienceYears || 0} –ª–µ—Ç
–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ${resume.education.map(edu => `${edu.degree} - ${edu.institution}`).join('; ')}
–ü—Ä–æ–µ–∫—Ç—ã: ${resume.projects.map(proj => proj.name).join(', ')}

–ó–ê–î–ê–ß–ê:
–û—Ü–µ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —à–∫–∞–ª–µ 0-100 –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.

–í–ï–†–ù–ò –û–¢–í–ï–¢ –í –°–¢–†–û–ì–û–ú JSON –§–û–†–ú–ê–¢–ï:
{
  "overallScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "skillsMatch": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "experienceMatch": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "educationMatch": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "confidence": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100,
  "detailedAnalysis": {
    "matchedSkills": ["–Ω–∞–≤—ã–∫1", "–Ω–∞–≤—ã–∫2"],
    "missingSkills": ["–Ω–∞–≤—ã–∫3", "–Ω–∞–≤—ã–∫4"],
    "experienceGap": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –æ–ø—ã—Ç–∞ –∏–ª–∏ null",
    "strengths": ["—Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1", "—Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2"],
    "weaknesses": ["—Å–ª–∞–±–æ—Å—Ç—å 1", "—Å–ª–∞–±–æ—Å—Ç—å 2"],
    "redFlags": ["–∫—Ä–∞—Å–Ω—ã–π —Ñ–ª–∞–≥ –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤"],
    "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"]
  },
  "recommendation": "STRONG_MATCH" | "GOOD_MATCH" | "WEAK_MATCH" | "NO_MATCH",
  "reasoningNotes": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"
}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!
`;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
   */
  private parseAIResponse(text: string): JobMatchResult {
    try {
      // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö markdown –±–ª–æ–∫–æ–≤
      const cleanText = text.replace(/```json\n?|\n?```/g, '').trim();
      const parsed = JSON.parse(cleanText);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (typeof parsed.overallScore !== 'number' || 
          !parsed.detailedAnalysis || 
          !parsed.recommendation) {
        throw new Error('–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI');
      }
      
      return parsed as JobMatchResult;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ AI:', error);
      console.log('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', text);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç AI');
    }
  }

  /**
   * –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ AI
   */
  private getFallbackResult(resume: ParsedResumeData, job: JobData): JobMatchResult {
    return {
      overallScore: 50,
      skillsMatch: 50,
      experienceMatch: 50,
      educationMatch: 50,
      confidence: 30,
      detailedAnalysis: {
        matchedSkills: [],
        missingSkills: job.skills,
        strengths: ['–†–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'],
        weaknesses: ['–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ'],
        redFlags: [],
        recommendations: ['–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞']
      },
      recommendation: 'WEAK_MATCH',
      reasoningNotes: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏'
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ–ø—ã—Ç–∞
   */
  private calculateExperienceMatch(resume: ParsedResumeData, job: JobData): number {
    const resumeExperience = resume.totalExperienceYears || 0;
    
    if (!job.experience) return 70; // –ï—Å–ª–∏ –æ–ø—ã—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –≤–∞–∫–∞–Ω—Å–∏–∏
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    const experienceMatch = job.experience.match(/(\d+)/);
    if (!experienceMatch) return 70;
    
    const requiredExperience = parseInt(experienceMatch[1]);
    
    if (resumeExperience >= requiredExperience) return 100;
    if (resumeExperience >= requiredExperience * 0.7) return 80;
    if (resumeExperience >= requiredExperience * 0.5) return 60;
    if (resumeExperience > 0) return 40;
    
    return 20;
  }
}

export default ResumeJobMatcher;